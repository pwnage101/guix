diff -rNu optparse-applicative-0.13.0.0/tests/test.hs optparse-applicative-0.13.0.0-patched/tests/test.hs
--- optparse-applicative-0.13.0.0/tests/test.hs	2016-08-14 23:18:57.000000000 -0400
+++ optparse-applicative-0.13.0.0-patched/tests/test.hs	2017-02-03 01:04:00.567245045 -0500
@@ -150,42 +150,6 @@
       i = info (p1 <**> helper) idm
   in checkHelpTextWith (ExitFailure 1) defaultPrefs "nested" i ["c", "b"]
 
-prop_drops_back_contexts :: Property
-prop_drops_back_contexts = once $
-  let p3 = strOption (short 'a' <> metavar "A")
-      p2 = subparser (command "b" (info p3 idm)  <> metavar "B")
-      p1 = subparser (command "c" (info p3 idm)  <> metavar "C")
-      p0 = (,) <$> p2 <*> p1
-      i = info (p0 <**> helper) idm
-  in checkHelpTextWith (ExitFailure 1) defaultPrefs "dropback" i ["b", "-aA"]
-
-prop_context_carry :: Property
-prop_context_carry = once $
-  let p3 = strOption (short 'a' <> metavar "A")
-      p2 = subparser (command "b" (info p3 idm)  <> metavar "B")
-      p1 = subparser (command "c" (info p3 idm)  <> metavar "C")
-      p0 = (,) <$> p2 <*> p1
-      i = info (p0 <**> helper) idm
-  in checkHelpTextWith (ExitFailure 1) defaultPrefs "carry" i ["b", "-aA", "c"]
-
-prop_help_on_empty :: Property
-prop_help_on_empty = once $
-  let p3 = strOption (short 'a' <> metavar "A")
-      p2 = subparser (command "b" (info p3 idm)  <> metavar "B")
-      p1 = subparser (command "c" (info p3 idm)  <> metavar "C")
-      p0 = (,) <$> p2 <*> p1
-      i = info (p0 <**> helper) idm
-  in checkHelpTextWith (ExitFailure 1) (prefs showHelpOnEmpty) "helponempty" i []
-
-prop_help_on_empty_sub :: Property
-prop_help_on_empty_sub = once $
-  let p3 = strOption (short 'a' <> metavar "A" <> help "both commands require this")
-      p2 = subparser (command "b" (info p3 idm)  <> metavar "B")
-      p1 = subparser (command "c" (info p3 idm)  <> metavar "C")
-      p0 = (,) <$> p2 <*> p1
-      i = info (p0 <**> helper) idm
-  in checkHelpTextWith (ExitFailure 1) (prefs showHelpOnEmpty) "helponemptysub" i ["b", "-aA", "c"]
-
 prop_many_args :: Property
 prop_many_args = forAll (choose (0,2000)) $ \nargs ->
   let p = many (argument str idm)
